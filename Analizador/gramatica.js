/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[2,5,18,73,74,75,76,77,78],$V9=[2,5,18,33,47,49,53,54,55,56,57,58,73,74,75,76,77,78],$Va=[18,21,30,31],$Vb=[12,15,17],$Vc=[1,46],$Vd=[1,38],$Ve=[1,55],$Vf=[1,56],$Vg=[1,57],$Vh=[1,58],$Vi=[1,59],$Vj=[1,60],$Vk=[1,61],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,37],$Vs=[1,39],$Vt=[17,30],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[12,17,22,30,34,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100],$VK=[1,115],$VL=[1,116],$VM=[1,120],$VN=[1,121],$VO=[1,117],$VP=[1,122],$VQ=[1,118],$VR=[1,119],$VS=[1,130],$VT=[12,17,22,30,34,85,86,91,92,93,94,95,96,97,98],$VU=[2,18,33,47,49,53,54,55,56,57,58,74,75,76,77,78],$VV=[12,17,22,30,34,85,86,87,88,89,91,92,93,94,95,96,97,98],$VW=[12,17,22,30,34,91,92,93,94,95,96,97,98],$VX=[1,204],$VY=[1,198],$VZ=[1,199],$V_=[1,200],$V$=[1,201],$V01=[1,202],$V11=[1,203],$V21=[1,225],$V31=[17,22],$V41=[1,267],$V51=[33,53,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DVARIABLES":7,"DARREGLOS":8,"DMETODO":9,"DFUNCION":10,"RUN":11,"puntocoma":12,"TIPO":13,"LISTAID":14,"asignar":15,"EXPRESION":16,"coma":17,"identificador":18,"AVARIABLES":19,"AARREGLOS":20,"corA":21,"corC":22,"UDIMENSION":23,"BDIMENSION":24,"new":25,"LISTAVALORES":26,"VALORES":27,"PRIMITIVO":28,"parA":29,"parC":30,"llavA":31,"INSTRUCCIONES":32,"llavC":33,"dospuntos":34,"void":35,"PARAMETROS":36,"PARAMETRO":37,"LLAMADA":38,"ENTRADAS":39,"LLAMADAS":40,"INSTRUCCION":41,"RETURN":42,"PRINT":43,"IF":44,"SWITCH":45,"BREAK":46,"if":47,"else":48,"switch":49,"CASES":50,"DEFAULT":51,"CASO":52,"case":53,"default":54,"return":55,"break":56,"print":57,"println":58,"UPPER":59,"toUpper":60,"LOWER":61,"toLower":62,"ROUND":63,"round":64,"LENGTH":65,"length":66,"TYPEOF":67,"typeof":68,"TOSTRING":69,"tostring":70,"TOCHAR":71,"tochar":72,"run":73,"int":74,"double":75,"boolean":76,"char":77,"string":78,"entero":79,"doble":80,"true":81,"false":82,"texto":83,"caracter":84,"mas":85,"menos":86,"mul":87,"div":88,"mod":89,"exp":90,"igual":91,"desigual":92,"menor":93,"menorIgual":94,"mayor":95,"mayorIgual":96,"or":97,"and":98,"not":99,"ternario":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"puntocoma",15:"asignar",17:"coma",18:"identificador",21:"corA",22:"corC",25:"new",29:"parA",30:"parC",31:"llavA",33:"llavC",34:"dospuntos",35:"void",47:"if",48:"else",49:"switch",53:"case",54:"default",55:"return",56:"break",57:"print",58:"println",60:"toUpper",62:"toLower",64:"round",66:"length",68:"typeof",70:"tostring",72:"tochar",73:"run",74:"int",75:"double",76:"boolean",77:"char",78:"string",79:"entero",80:"doble",81:"true",82:"false",83:"texto",84:"caracter",85:"mas",86:"menos",87:"mul",88:"div",89:"mod",90:"exp",91:"igual",92:"desigual",93:"menor",94:"menorIgual",95:"mayor",96:"mayorIgual",97:"or",98:"and",99:"not",100:"ternario"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,5],[7,3],[14,3],[14,1],[19,4],[20,7],[20,10],[8,1],[8,1],[23,11],[23,9],[23,7],[24,16],[24,11],[26,3],[26,1],[27,5],[27,3],[9,6],[9,8],[9,7],[9,9],[10,8],[10,9],[36,3],[36,1],[37,2],[38,4],[38,5],[40,3],[40,4],[32,2],[32,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,2],[44,7],[44,11],[44,9],[45,8],[45,7],[50,2],[50,1],[52,4],[51,3],[42,2],[42,3],[46,2],[43,5],[43,5],[59,4],[61,4],[63,4],[65,4],[67,4],[69,4],[71,4],[11,5],[11,6],[39,3],[39,1],[13,1],[13,1],[13,1],[13,1],[13,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,5],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,4],[16,3],[16,3],[16,4],[16,7],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
       
             //Objeto de Salida
             var salida = {
                lerrores: lista,
                instrucciones: $$[$0-1],
                lsimbolos: simbolos,
                lmetodos: metodos
             }
             //Reiniciar la lista de Errores
             lista = new ListaErrores();
             simbolos = new ListaSimbolos();
             metodos = new ListaMetodos();
             return salida;
        
break;
case 2: case 41:

                //Insertar a la lista de instrucciones
                $$[$0-1].push($$[$0]); 
                //Retornar la lista de instrucciones
                this.$=$$[$0-1]
        
break;
case 3: case 42:

                //Lista de Instrucciones
                this.$ = [$$[$0]];
        
break;
case 4: case 5: case 6: case 7: case 8: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128:

                this.$ = $$[$0];
        
break;
case 9: case 53:

                lista.add("Sint√°ctico", "Token Inesperado " + $$[$0-1] , _$[$0-1].first_line, _$[$0-1].first_column + 1);
        
break;
case 10:

                this.$= INSTRUCCION.declaracionv($$[$0-4], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 11:

                this.$= INSTRUCCION.declaracionv($$[$0-2], $$[$0-1], null, this._$.first_line, this._$.first_column+1);
        
break;
case 12: case 24:

                $$[$0-2].push($$[$0]); 
                this.$=$$[$0-2];
        
break;
case 13: case 25: case 60:

                this.$ = [$$[$0]];
        
break;
case 14:

               this.$ = INSTRUCCION.asignacionv($$[$0-3],$$[$0-1], this._$.first_line, this._$.first_column+1); 
        
break;
case 15:

                this.$ = INSTRUCCION.asignarv($$[$0-6], $$[$0-4], null, $$[$0-1],  this._$.first_line, this._$.first_column+1);
        
break;
case 16:

                this.$ = INSTRUCCION.asignarv($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1);
        
break;
case 17: case 18:

                this.$=$$[$0];
        
break;
case 19:

                this.$= INSTRUCCION.declaraciona1($$[$0-10], $$[$0-9], $$[$0-4], $$[$0-2], null,this._$.first_line, this._$.first_column+1)
        
break;
case 20:

                this.$= INSTRUCCION.declaraciona2(1, $$[$0-8], $$[$0-7], $$[$0-2], null, this._$.first_line, this._$.first_column+1);
        
break;
case 21:

                this.$= INSTRUCCION.declaraciona3(1, $$[$0-6], $$[$0-5], $$[$0-1], null, this._$.first_line, this._$.first_column+1);
        
break;
case 22:

                this.$= INSTRUCCION.declaraciona1($$[$0-15], $$[$0-14], $$[$0-7], $$[$0-5], $$[$0-2], this._$.first_line, this._$.first_column+1)
        
break;
case 23:

                this.$= INSTRUCCION.declaraciona2(2, $$[$0-10], $$[$0-9], $$[$0-2], this._$.first_line, this._$.first_column+1);
        
break;
case 26:

                $$[$0-4].push($$[$0-1]); 
                this.$=$$[$0-4];
        
break;
case 27:

                this.$ = [$$[$0-1]];
        
break;
case 28:

                this.$ = INSTRUCCION.dmetodo($$[$0-5], null, $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 29:

                this.$ = INSTRUCCION.dmetodo($$[$0-7], null, $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 30:

                this.$ = INSTRUCCION.dmetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 31:

                this.$ = INSTRUCCION.dmetodo($$[$0-8], $$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 32:

                this.$ = INSTRUCCION.dfuncion($$[$0-7], null, $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 33:

                this.$ = INSTRUCCION.dfuncion($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 34: case 77:

                $$[$0-2].push($$[$0]); 
                this.$=$$[$0-2]
        
break;
case 35: case 78:

                this.$=[$$[$0]]
        
break;
case 36:

                this.$= INSTRUCCION.declaracionp($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column+1)
        
break;
case 37:

                        this.$= INSTRUCCION.llamada($$[$0-3], null, this._$.first_line, this._$.first_column+1)
                
break;
case 38:

                        this.$= INSTRUCCION.llamada($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1)
                
break;
case 39:

                        this.$= INSTRUCCION.llamadaa($$[$0-2], null, this._$.first_line, this._$.first_column+1)
                
break;
case 40:

                        this.$= INSTRUCCION.llamadaa($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
                
break;
case 54:

                this.$ = INSTRUCCION.si($$[$0-4], $$[$0-1], null, this._$.first_line, this._$.first_column+1)
        
break;
case 55:

                this.$ = INSTRUCCION.si($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 56:

                this.$ = INSTRUCCION.si($$[$0-6], $$[$0-3], $$[$0], this._$.first_line, this._$.first_column+1)
        
break;
case 57:

                this.$ = INSTRUCCION.switch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 58:

                this.$ = INSTRUCCION.switch($$[$0-4], $$[$0-1], null, this._$.first_line, this._$.first_column+1)
        
break;
case 59:

                $$[$0-1].push($$[$0]); 
                this.$=$$[$0-1];
        
break;
case 61:

                this.$ = INSTRUCCION.case($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)
        
break;
case 62:

                 this.$ = INSTRUCCION.default(null, $$[$0], this._$.first_line, this._$.first_column+1)
        
break;
case 63:

                this.$= INSTRUCCION.return(null, this._$.first_line, this._$.first_column+1)
        
break;
case 64:

                this.$= INSTRUCCION.return($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 65:

                this.$= INSTRUCCION.break(this._$.first_line, this._$.first_column+1)
        
break;
case 66:

                this.$= INSTRUCCION.print($$[$0-2], this._$.first_line, this._$.first_column+1)
        
break;
case 67:

                this.$= INSTRUCCION.println($$[$0-2], this._$.first_line, this._$.first_column+1)
        
break;
case 68:

                this.$= INSTRUCCION.upper($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 69:

                this.$= INSTRUCCION.lower($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 70:

                this.$= INSTRUCCION.round($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 71:

                this.$= INSTRUCCION.length($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 72:

                this.$= INSTRUCCION.typeof($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 73:

                this.$= INSTRUCCION.tostring($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 74:

                this.$= INSTRUCCION.tochar($$[$0-1], this._$.first_line, this._$.first_column+1)
        
break;
case 75:

                this.$= INSTRUCCION.run($$[$0-3], null, this._$.first_line, this._$.first_column+1)
        
break;
case 76:

                this.$= INSTRUCCION.run($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1)
        
break;
case 79:
this.$ = TIPO_DATO.INT
break;
case 80:
this.$ = TIPO_DATO.DOUBLE
break;
case 81:
this.$ = TIPO_DATO.BOOLEAN
break;
case 82:
this.$ = TIPO_DATO.CHAR
break;
case 83:
this.$ = TIPO_DATO.STRING
break;
case 84: case 109:

                this.$ = INSTRUCCION.valor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line, this._$.first_column+1);
        
break;
case 85: case 110:

                this.$ = INSTRUCCION.valor(Number($$[$0]), TIPO_VALOR.DOUBLE, this._$.first_line, this._$.first_column+1);
        
break;
case 86: case 87: case 111: case 112:

                this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line, this._$.first_column+1);
        
break;
case 88: case 113:

                this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.STRING, this._$.first_line, this._$.first_column+1);
        
break;
case 89: case 114:

                this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.CHAR, this._$.first_line, this._$.first_column+1);
        
break;
case 90: case 115:

                this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column+1);
        
break;
case 91:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column+1);
        
break;
case 92:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column+1);
        
break;
case 93:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column+1);
        
break;
case 94:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column+1);
        
break;
case 95:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MODULO, this._$.first_line, this._$.first_column+1);
        
break;
case 96:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA, this._$.first_line, this._$.first_column+1);
        
break;
case 97:

                this.$ = INSTRUCCION.operacion($$[$0], null, TIPO_OPERACION.UNARIO, this._$.first_line, this._$.first_column+1);
        
break;
case 98:

                this.$ = $$[$0-1];
        
break;
case 99:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.IGUAL, this._$.first_line, this._$.first_column+1);
        
break;
case 100:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.DESIGUAL, this._$.first_line, this._$.first_column+1);
        
break;
case 101:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MENOR, this._$.first_line, this._$.first_column+1);
        
break;
case 102:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL, this._$.first_line, this._$.first_column+1);
        
break;
case 103:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR, this._$.first_line, this._$.first_column+1);
        
break;
case 104:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL, this._$.first_line, this._$.first_column+1);
        
break;
case 105:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column+1);
        
break;
case 106:

                this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column+1);
        
break;
case 107:

                this.$ = INSTRUCCION.operacion($$[$0] ,null, TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column+1);
        
break;
case 108:

                this.$ = INSTRUCCION.ternario($$[$0-4] , $$[$0-2], $$[$0], TIPO_OPERACION.TERNARIO, this._$.first_line, this._$.first_column+1);
        
break;
case 116:

                this.$ = INSTRUCCION.casteo($$[$0-2], $$[$0], TIPO_OPERACION.CASTEO, this._$.first_line, this._$.first_column+1);
        
break;
case 117:

                this.$ = INSTRUCCION.operacion($$[$0-2], null, TIPO_OPERACION.INCREMENTO, this._$.first_line, this._$.first_column+1)       
        
break;
case 118:

                this.$ = INSTRUCCION.operacion($$[$0-2], null, TIPO_OPERACION.DECREMENTO, this._$.first_line, this._$.first_column+1)       
        
break;
case 119:

                this.$ = INSTRUCCION.valorv($$[$0-3], $$[$0-1], null,  this._$.first_line, this._$.first_column+1);
        
break;
case 120:

                this.$ = INSTRUCCION.valorv($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1);
        
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:10,18:$V1,23:11,24:12,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{1:[3]},{2:$V0,5:[1,20],6:21,7:4,8:5,9:6,10:7,11:8,13:10,18:$V1,23:11,24:12,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),{12:[1,22]},{14:23,18:[1,24]},o($V9,[2,17]),o($V9,[2,18]),{29:[1,25]},{18:[1,26]},o($Va,[2,79]),o($Va,[2,80]),o($Va,[2,81]),o($Va,[2,82]),o($Va,[2,83]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,9]),{12:[1,28],15:[1,27],17:[1,29]},o($Vb,[2,13],{21:[1,30]}),{13:34,30:[1,31],36:32,37:33,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{29:[1,35]},{16:36,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($V9,[2,11]),{18:[1,62]},{22:[1,63]},{31:[1,64],34:[1,65]},{17:[1,67],30:[1,66]},o($Vt,[2,35]),{18:[1,68]},{16:71,18:$Vc,29:$Vd,30:[1,69],39:70,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{12:[1,72],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{16:88,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{13:90,16:89,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:91,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VJ,[2,109]),o($VJ,[2,110]),o($VJ,[2,111]),o($VJ,[2,112]),o($VJ,[2,113]),o($VJ,[2,114]),o($VJ,[2,115],{21:[1,92],29:[1,93]}),o($VJ,[2,121]),o($VJ,[2,122]),o($VJ,[2,123]),o($VJ,[2,124]),o($VJ,[2,125]),o($VJ,[2,126]),o($VJ,[2,127]),o($VJ,[2,128]),{29:[1,94]},{29:[1,95]},{29:[1,96]},{29:[1,97]},{29:[1,98]},{29:[1,99]},{29:[1,100]},o($Vb,[2,12]),{15:[1,101],21:[1,102]},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:103,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{13:124,35:[1,123],74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{31:[1,125],34:[1,126]},{13:34,37:127,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($Vt,[2,36]),{12:[1,128]},{17:$VS,30:[1,129]},o($Vt,[2,78],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI}),o($V9,[2,10]),{16:131,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:[1,132],86:$Vr,99:$Vs},{16:133,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:[1,134],99:$Vs},{16:135,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:136,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:137,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:138,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:139,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:140,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:141,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:142,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:143,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:144,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:145,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:146,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:147,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VT,[2,97],{87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),{30:[1,148],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,149]},o([12,17,22,30,34,97,98],[2,107],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,100:$VI}),{16:150,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:71,18:$Vc,29:$Vd,30:[1,151],39:152,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:153,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:154,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:155,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:156,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:157,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:158,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:159,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:162,18:$Vc,21:[1,161],25:[1,160],29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{22:[1,163]},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,164],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),{12:[1,166]},{15:[1,167],21:[1,168],29:[1,169]},{12:[1,170],16:171,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{29:[1,172]},{29:[1,173]},{29:[1,174]},{29:[1,175]},{12:[1,176]},{31:[1,177]},{31:[1,178]},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:179,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{13:181,35:[1,180],74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($Vt,[2,34]),o($V8,[2,75]),{12:[1,182]},{16:183,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VT,[2,91],{87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VJ,[2,117]),o($VT,[2,92],{87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VJ,[2,118],{40:47,59:48,61:49,63:50,65:51,67:52,69:53,71:54,16:88,18:$Vc,29:$Vd,60:$Ve,62:$Vf,64:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,99:$Vs}),o($VV,[2,93],{90:$Vz,100:$VI}),o($VV,[2,94],{90:$Vz,100:$VI}),o($VV,[2,95],{90:$Vz,100:$VI}),o($VV,[2,96],{100:$VI}),o($VW,[2,99],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VW,[2,100],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VW,[2,101],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VW,[2,102],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VW,[2,103],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o($VW,[2,104],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,100:$VI}),o([12,17,22,30,34],[2,105],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI}),o([12,17,22,30,34,97],[2,106],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,98:$VH,100:$VI}),{34:[1,184],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},o($VJ,[2,98]),{16:185,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{22:[1,186],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},o($VJ,[2,39]),{17:$VS,30:[1,187]},{30:[1,188],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,189],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,190],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,191],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,192],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,193],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,194],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{13:195,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{18:$VX,26:196,28:197,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11},{12:[1,205],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{15:[1,206]},o($V8,[2,28]),o($VU,[2,41]),o($VU,[2,53]),{16:207,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:208,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:71,18:$Vc,29:$Vd,30:[1,209],39:210,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VU,[2,63]),{12:[1,211],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{16:212,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:213,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:214,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:215,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VU,[2,65]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:216,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:217,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,218],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{31:[1,219]},{31:[1,220]},o($V8,[2,76]),o($Vt,[2,77],{85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI}),{16:221,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VJ,[2,116]),o($VJ,[2,119],{21:[1,222]}),o($VJ,[2,40]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),o($VJ,[2,72]),o($VJ,[2,73]),o($VJ,[2,74]),{21:[1,223]},{17:$V21,22:[1,224]},o($V31,[2,25]),o($V31,[2,84]),o($V31,[2,85]),o($V31,[2,86]),o($V31,[2,87]),o($V31,[2,88]),o($V31,[2,89]),o($V31,[2,90]),o($V9,[2,21]),{21:[1,227],25:[1,226]},{12:[1,228],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{22:[1,229],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{12:[1,230]},{17:$VS,30:[1,231]},o($VU,[2,64]),{30:[1,232],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,233],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,234],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{30:[1,235],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,236],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,237],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($V8,[2,30]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:238,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:239,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($VJ,[2,108]),{16:240,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:241,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{12:[1,242]},{18:$VX,28:243,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11},{13:244,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{21:[1,246],27:245},o($VU,[2,14]),{15:[1,247],21:[1,248]},o($VU,[2,37]),{12:[1,249]},{12:[1,250]},{12:[1,251]},{31:[1,252]},{31:[1,253]},o($V8,[2,29]),o($V8,[2,32]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,254],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,255],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{22:[1,256],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{22:[1,257],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},o($V9,[2,20]),o($V31,[2,24]),{21:[1,258]},{17:[1,260],22:[1,259]},{18:$VX,26:261,28:197,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11},{16:262,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{16:263,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($VU,[2,38]),o($VU,[2,66]),o($VU,[2,67]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:264,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{50:265,52:266,53:$V41},o($V8,[2,31]),o($V8,[2,33]),o($VJ,[2,120]),{12:[1,268]},{16:269,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{12:[1,270]},{21:[1,271]},{17:$V21,22:[1,272]},{12:[1,273],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{22:[1,274],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,275],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{33:[1,277],51:276,52:278,53:$V41,54:[1,279]},o($V51,[2,60]),{16:280,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($V9,[2,19]),{22:[1,281],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},o($V9,[2,23]),{18:$VX,26:282,28:197,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11},o($V31,[2,27]),o($VU,[2,15]),{15:[1,283]},o($VU,[2,54],{48:[1,284]}),{33:[1,285]},o($VU,[2,58]),o($V51,[2,59]),{34:[1,286]},{34:[1,287],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{21:[1,288]},{17:$V21,22:[1,289]},{16:290,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},{31:[1,291],44:292,47:$VM},o($VU,[2,57]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:293,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:294,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{16:295,18:$Vc,29:$Vd,40:47,59:48,60:$Ve,61:49,62:$Vf,63:50,64:$Vg,65:51,66:$Vh,67:52,68:$Vi,69:53,70:$Vj,71:54,72:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,86:$Vr,99:$Vs},o($V31,[2,26]),{12:[1,296],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,32:297,38:110,41:104,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($VU,[2,56]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[2,62],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($V51,[2,61],{13:10,23:11,24:12,7:105,19:106,8:107,20:108,42:109,38:110,43:111,44:112,45:113,46:114,41:165,2:$VK,18:$VL,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7}),{22:[1,298],85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,100:$VI},o($VU,[2,16]),{2:$VK,7:105,8:107,13:10,18:$VL,19:106,20:108,23:11,24:12,33:[1,299],38:110,41:165,42:109,43:111,44:112,45:113,46:114,47:$VM,49:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{12:[1,300]},o($VU,[2,55]),o($V9,[2,22])],
defaultActions: {20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        //Importes
        var ListaErrores = require("./recursos/errores/ListaErrores");
        var ListaSimbolos = require("./recursos/datos/ListaSimbolos");
        var ListaMetodos = require("./recursos/datos/ListaMetodos");
        const TIPO_OPERACION = require('./recursos/enum/TipoOperacion');
        const TIPO_VALOR = require('./recursos/enum/TipoValor');
        const TIPO_DATO = require('./recursos/enum/TipoDato');
        const INSTRUCCION = require('./recursos/instruccion/Instruccion');

        //Instrucciones
        var lista = new ListaErrores();
        var simbolos = new ListaSimbolos();
        var metodos = new ListaMetodos();

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios en blanco
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 74;
break;
case 4:return 75;
break;
case 5:return 76;
break;
case 6:return 77;
break;
case 7:return 78;
break;
case 8:return 81;
break;
case 9:return 82;
break;
case 10:return 25;
break;
case 11:return 35;
break;
case 12:return 57;
break;
case 13:return 58;
break;
case 14:return 55;
break;
case 15:return 62;
break;
case 16:return 60;
break;
case 17:return 64;
break;
case 18:return 66;
break;
case 19:return 68;
break;
case 20:return 70;
break;
case 21:return 72;
break;
case 22:return 73;
break;
case 23:return 47;
break;
case 24:return 48;
break;
case 25:return 49;
break;
case 26:return 53;
break;
case 27:return 54;
break;
case 28:return 56;
break;
case 29:return 85;
break;
case 30:return 86;
break;
case 31:return 87;
break;
case 32:return 88;
break;
case 33:return 90;
break;
case 34:return 89;
break;
case 35:return 91;
break;
case 36:return 92;
break;
case 37:return 94;
break;
case 38:return 96;
break;
case 39:return 93;
break;
case 40:return 95;
break;
case 41:return 15;
break;
case 42:return 34;
break;
case 43:return 100;
break;
case 44:return 97;
break;
case 45:return 98;
break;
case 46:return 99;
break;
case 47:return 29;
break;
case 48:return 30;
break;
case 49:return 21;
break;
case 50:return 22;
break;
case 51:return 31;
break;
case 52:return 33; 
break;
case 53:return 12;
break;
case 54:return 17;
break;
case 55:cadena= "";        this.pushState("string");
break;
case 56:cadena += yy_.yytext;
break;
case 57:cadena += "\"";
break;
case 58:cadena += "\n";
break;
case 59:cadena += " ";
break;
case 60:cadena += "\t";
break;
case 61:cadena += "\\";
break;
case 62:cadena += "\'";
break;
case 63:yy_.yytext=cadena; this.popState(); return 83;
break;
case 64:return 84;
break;
case 65:return 80;
break;
case 66:return 79;               
break;
case 67:return 18;  
break;
case 68:return 5;
break;
case 69:
                                lista.add("L√©xico", "Caracter Inesperado: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column  + 1);

                            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([^"!>"]|[\r|\f|\s|\t|\n])*\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:'(\\n|\\\\|\\t|\\r|\\'|\\"|.)')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[56,57,58,59,60,61,62,63],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}